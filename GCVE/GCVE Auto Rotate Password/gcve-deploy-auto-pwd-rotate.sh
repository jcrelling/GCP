#!/bin/bash


# Prompt user for input and variables
read -p "Enter the region (e.g., us-central1): " REGION
read -p "Enter the zone (e.g., us-central1/a): " ZONE
read -p "Enter the project ID: " PROJECT_ID
read -p "Enter the Service Account name (e.g., cloud-run-sa): " SERVICE_ACCOUNT
read -p "Enter the private cloud ID: " PRIVATE_CLOUD_ID
MY_ID=$(gcloud config get-value account)


# Function to handle errors
handle_error() {
    echo "Error occurred in the script at line $1. Exiting..."
    exit 1
}


# Trap errors
trap 'handle_error $LINENO' ERR


# Set the project as active
echo "Setting the project as active..."
gcloud config set project "${PROJECT_ID}"


# Enable required APIs
echo "Enabling required APIs..."
gcloud services enable cloudscheduler.googleapis.com run.googleapis.com cloudbuild.googleapis.com cloudscheduler.googleapis.com --project "${PROJECT_ID}"
sleep 30


# Create custom role, Service Account and grant access
echo "Creating Service Account..."
gcloud iam service-accounts create "${SERVICE_ACCOUNT}" \
    --description="Service account to execute the GCVE Password Auto Reset solution" \
    --display-name="${SERVICE_ACCOUNT}" --project "${PROJECT_ID}"
sleep 10


echo "Creating cutome role..."
gcloud iam roles create GCVEPwdAutoRotate --project "${PROJECT_ID}" \
    --title "GCVE Password Auto Rotate" --description "Role with permissiont to auto rotate GCVE passwords" \
    --permissions "vmwareengine.operations.get,vmwareengine.privateClouds.get,vmwareengine.privateClouds.resetNsxCredentials,vmwareengine.privateClouds.resetVcenterCredentials" \
    --stage=Alpha

echo "Granting the Service Account the roles/run.invoker role..."
gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
    --member "serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --role "roles/run.invoker"
gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
    --member "serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --role "roles/storage.objectAdmin"
gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
    --member "serviceAccount:${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --role "project/${PROJECT_ID}/roles/GCVEPwdAutoRotate"

echo "Granting impersonation access to the Service Account..."
gcloud iam service-accounts add-iam-policy-binding "${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --member "user:${MY_ID}" \
    --role "roles/iam.serviceAccountUser" --project "${PROJECT_ID}"


# Create directories and files for Docker image
echo "Creating folders and files for Docker image..."
mkdir -p gcve-auto-rotate-pwd
cd gcve-auto-rotate-pwd


cat << 'EOF' > gcve-auto-rotate-pwd.sh
#!/bin/bash
gcloud vmware private-clouds vcenter credentials reset \
 --private-cloud="${PRIVATE_CLOUD_ID}" \
 --project="${PROJECT_ID}" \
 --location="${ZONE}"

gcloud vmware private-clouds nsx credentials reset \
 --private-cloud="${PRIVATE_CLOUD_ID}" \
 --project="${PROJECT_ID}" \
 --location="${ZONE}"
EOF


sed -i "s|\${PRIVATE_CLOUD_ID}|${PRIVATE_CLOUD_ID}|g" gcve-auto-rotate-pwd.sh
sed -i "s|\${ZONE}|${ZONE}|g" gcve-auto-rotate-pwd.sh
sed -i "s|\${PROJECT_ID}|${PROJECT_ID}|g" gcve-auto-rotate-pwd.sh


cat << 'EOF' > Dockerfile
FROM google/cloud-sdk:latest
# Execute next commands in the directory /workspace
WORKDIR /workspace
# Copy over the script to the /workspace directory
COPY gcve-auto-rotate-pwd.sh .
# Just in case the script doesn't have the executable bit set
RUN chmod +x ./gcve-auto-rotate-pwd.sh
# Run the script when starting the container
CMD [ "./gcve-auto-rotate-pwd.sh" ]
EOF


# Build and push the Docker image
echo "Building and pushing Docker image..."
gcloud builds submit -t "gcr.io/${PROJECT_ID}/gcve-auto-rotate-pwd" --project "${PROJECT_ID}"


# Create the Cloud Run job
echo "Creating the Cloud Run job..."
gcloud beta run jobs create gcve-auto-rotate-pwd \
    --image "gcr.io/${PROJECT_ID}/gcve-auto-rotate-pwd" \
    --max-retries 5 \
    --service-account "${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --region "${REGION}" --project "${PROJECT_ID}"


# Schedule the job
echo "Scheduling the job with Cloud Scheduler..."
gcloud scheduler jobs create http gcve-auto-rotate-pwd \
    --location "${REGION}" \
    --schedule="0 0 */30 * *" \
    --uri="https://${REGION}-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${PROJECT_ID}/jobs/gcve-auto-rotate-pwd:run" \
    --http-method POST \
    --oauth-service-account-email "${SERVICE_ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --project "${PROJECT_ID}"


echo "Script execution completed successfully."